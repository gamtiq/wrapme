{"version":3,"file":"wrapme.esm.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport type AnyFunction = (...args: any[]) => any;\nexport type TargetFunction = AnyFunction;\n\nexport type AnyObject = {\n    [field in (number | string)]: any;\n};\n\nexport type TargetObject = AnyObject;\nexport type SaveObject = AnyObject;\n\nexport type Target = TargetObject | TargetFunction;\n\nexport type FieldGetter = () => unknown;\nexport type FieldSetter = (value: unknown) => unknown;\n\n/** Handler's parameter. */\nexport interface HandlerParam {\n    /** Array of arguments that were passed to the wrapping function. */\n    arg: any[];\n    /** Value of `arg[0]`. */\n    arg0: any;\n    /** Whether wrapping function is called as object's method or as usual function (by a call operation). */\n    byCall: boolean;\n    /** Whether wrapping function is called to get field's value (by get operation, as field's getter). */\n    byGet: boolean;\n    /** Whether wrapping function is called to set field's value (by set operation, as field's setter). */\n    bySet: boolean;\n    /** Whether wrapping function (and `handler`) is called during unwrapping. */\n    byUnwrap: boolean;\n    /** Context (`this`) with which wrapping function is called. */\n    context: any;\n    /** Value of `settings.data` option. */\n    data: any;\n    /** Name of the field or method that was wrapped. */\n    field: string | undefined;\n    /** Whether field's get and/or set operation was wrapped. */\n    fieldWrap: boolean;\n    /** Whether standalone function (not object's field/method) was wrapped. */\n    funcWrap: boolean;\n    /** Function that returns field's current value if field was wrapped. */\n    get: FieldGetter | undefined;\n    /** Name of the method or function that was wrapped. */\n    method: string | undefined;\n    /** Whether method was wrapped. */\n    methodWrap: boolean;\n    /** Number of `handler`'s call (starting from 1). */\n    number: number;\n    /** Result of original function/method when it is called before `handler`. */\n    result?: any;\n    /** \n     * Method that calls original function/method or field's getter/setter;\n     * by default values from `arg` will be used as arguments;\n     * but you may pass arguments to `run` and they will be used instead of the original arguments.\n     */\n    run: AnyFunction;\n    /**\n     * Similar to `run` but accepts an array of new arguments, e.g. `runApply([1, 2, 3])` is equivalent to `run(1, 2, 3)`;\n     * if the first argument of `runApply` is not an array it will be wrapped into array (i.e. `[arguments[0]]`);\n     * only the first argument  of `runApply` is used.\n     */\n    runApply: (paramSet?: any | any[]) => any;\n    /** An object that can be used to preserve some values between `handler` calls. */\n    save: SaveObject;\n    /** Function that changes field's current value if field was wrapped. */\n    set: FieldSetter | undefined;\n    /**\n     * Value of `settings` parameter; except for `settings.bind` and `settings.context`,\n     * it is possible to change any setting to alter following execution;\n     * so be careful when you change a field's value of `settings` object.\n     */\n    settings: WrapSettings;\n    /** Original function or method that was wrapped, or name of wrapped field. */\n    target: TargetFunction | string;\n    /** An object whose field/method was wrapped and replaced. */\n    targetObj: TargetObject | null;\n    /** Previous value returned by wrapping function. */\n    value: unknown;\n}\n\nexport type Handler = (param: HandlerParam) => any;\n\n/** Settings of {@link wrap} function. */\nexport interface WrapSettings {\n    /**\n     * Whether original function, method or field's operation should be called after `handler`.\n     * When this option is set to `true`, the result of original function/method or field's operation\n     * will be returned from wrapping function.\n     */\n    after?: boolean;\n    /**\n     * Whether original function, method or field's operation should be called before `handler`.\n     * When this option is set to `true`, the result of original function/method or field's operation\n     * will be available in `handler` and value returned from `handler` will be returned from wrapping function\n     * if `settings.after` and `settings.listen` are set to `false`.\n     */\n    before?: boolean;\n    /** Whether wrapping function should be bound to `target` object. */\n    bind?: boolean;\n    /** Context (`this`) that should be used for `handler` call. */\n    context?: object;\n    /** Any data that should be available in `handler`. */\n    data?: any;\n    /**\n     * Whether field's get operation should be intercepted and\n     * whether created wrapping function should be used as field's getter.\n     * If a function is provided the function will be used as value for `HandlerParam.get`\n     * when no getter is specified for the field.\n     * Default value is `true` for usual (non-functional) field and `false` for method.\n     */\n    get?: boolean | FieldGetter;\n    /**\n     * Whether original function, method or field's operation should be called before `handler`.\n     * When this option is set to `true`, the result of original function/method or field's operation\n     * will be available in `handler` and will be returned from wrapping function\n     * if `settings.after` is set to `false`.\n     */\n    listen?: boolean;\n    /**\n     * Whether field's set operation should be intercepted and\n     * whether created wrapping function should be used as field's setter.\n     * If a function is provided the function will be used as value for `HandlerParam.set`\n     * when no getter is specified for the field.\n     * Default value is `true` for usual (non-functional) field and `false` for method.\n     */\n    set?: boolean | FieldSetter;\n    [field: string]: any;\n}\n\nexport type Wrapper = TargetFunction;\n\nexport type Unwrap = () => void;\n\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Wraps specified object's field/method or standalone function into new (wrapping) function\n * that calls passed handler which eventually may run wrapped function or get/set field's value.\n * \n * @param target\n *   Function that should be wrapped or an object whose field/method will be wrapped and replaced.\n * @param field\n *   Name of field/method that should be wrapped or a handler when function is passed for `target` parameter.\n * @param handler\n *   A function (interceptor) that should be executed when newly created function is called\n *   or get/set operation for the field is applied, or settings when function is passed for `target` parameter.\n *   When `settings.after` and `settings.listen` are `false`, result of `handler` will be returned from wrapping function.\n * @param settings\n *   Optional settings that will be available in `handler`.\n * @return\n *   Wrapping function when `target` is a function, or a function that restores original field/method when `target` is an object.\n * @author Denis Sikuler\n */\nexport function wrap(target: TargetObject, field: string, handler: Handler, settings?: WrapSettings): Unwrap;\nexport function wrap(target: TargetFunction, handler: Handler, settings?: WrapSettings): Wrapper;\nexport function wrap(target: any, field: any, handler?: any, settings?: any): any {   // eslint-disable-line max-params, @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\n    let fieldWrap = false;\n    let funcWrap = false;\n    let methodWrap = false;\n    let number = 0;\n    const save = {};\n    let descr: number | PropertyDescriptor | undefined = 1;\n    let fieldValue: unknown;\n    let get: FieldGetter | undefined;\n    let method: string | undefined;\n    let original: AnyFunction | string;\n    let targetObj: TargetObject | null;\n    let set: FieldSetter | undefined;\n    let value: unknown;\n    if (typeof field === 'string') {\n        targetObj = target;\n        original = target[field];\n        if (typeof original === 'function' && (! settings || (! settings.get && ! settings.set))) {\n            method = field;\n            methodWrap = true;\n        }\n        else {\n            fieldValue = original;\n            original = field;\n            fieldWrap = true;\n        }\n    }\n    /* eslint-disable no-param-reassign */\n    else {\n        original = target;\n        targetObj = null;\n        settings = handler;\n        handler = field;\n        field = method;\n        method = target.name;\n        funcWrap = true;\n    }\n    if (! settings) {\n        settings = {};\n    }\n    /* eslint-enable no-param-reassign */\n    const handlerContext = settings.context;\n\n    function wrapper(this: unknown): unknown {\n        // eslint-disable-next-line prefer-rest-params\n        const arg = Array.prototype.slice.call(arguments);\n        const byCall = ! fieldWrap;\n        const byGet = fieldWrap && ! arg.length;\n        const bySet = fieldWrap && ! byGet;\n        // eslint-disable-next-line consistent-this, no-invalid-this, @typescript-eslint/no-this-alias\n        const context = this;\n\n        function exec(argList: unknown[]): unknown {\n            if (byGet) {\n                return (get as TargetFunction)();\n            }\n            if (bySet) {\n                return (set as TargetFunction)(argList[0]);\n            }\n            \n            return (original as AnyFunction).apply(context, argList);\n        }\n\n        const env: HandlerParam = {\n            arg,\n            arg0: arg[0],\n            byCall,\n            byGet,\n            bySet,\n            byUnwrap: ! descr,\n            context,\n            data: settings.data,\n            field,\n            fieldWrap,\n            funcWrap,\n            get,\n            method,\n            methodWrap,\n            number: ++number,\n            save,\n            set,\n            settings,\n            target: original,\n            targetObj,\n            run,\n            runApply(firstArg) {\n                return exec(\n                    // eslint-disable-next-line no-nested-ternary\n                    arguments.length\n                        ? (Array.isArray(firstArg)\n                            ? firstArg\n                            : [firstArg]\n                        )\n                        : arg\n                );\n            },\n            value\n        };\n        let result;\n\n        function run(): unknown {\n            // eslint-disable-next-line multiline-ternary, prefer-rest-params\n            return exec((arguments.length ? arguments : arg) as unknown[]);\n        }\n        \n        if (settings.before || settings.listen) {\n            result = run();\n        }\n        env.result = result;\n        \n        env.result = handlerContext\n            ? handler.call(handlerContext, env)\n            : handler(env);\n\n        if (settings.after) {\n            result = run();\n        }\n        else if (! settings.listen) {\n            result = env.result;\n        }\n        \n        // eslint-disable-next-line no-return-assign\n        return value = result;\n    }\n\n    if (targetObj) {\n        if (methodWrap) {\n            targetObj[method as string] = settings.bind\n                ? wrapper.bind(targetObj)\n                : wrapper;\n\n            return function unwrap(): void {\n                (targetObj as AnyObject)[method as string] = original;\n            };\n        }\n        else {\n            const originalDescr = Object.getOwnPropertyDescriptor(targetObj, field)\n                || {value: fieldValue, writable: true, enumerable: true, configurable: true};\n            descr = Object.getOwnPropertyDescriptor(targetObj, field);\n            if (descr) {\n                delete descr.value;\n                delete descr.writable;\n            }\n            else {\n                descr = {enumerable: true, configurable: true};\n            }\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            get = descr.get\n                || (typeof settings.get === 'function' ? settings.get : null)   // eslint-disable-line multiline-ternary\n                || function get(): unknown {   // eslint-disable-line no-shadow\n                    return fieldValue;\n                };\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            set = descr.set\n                || (typeof settings.set === 'function' ? settings.set : null)   // eslint-disable-line multiline-ternary\n                || function set(val: unknown): unknown {   // eslint-disable-line no-shadow\n                    // eslint-disable-next-line no-return-assign\n                    return fieldValue = val;\n                };\n            if (! ('get' in settings) || settings.get) {\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                descr.get = wrapper;\n            }\n            if (! ('set' in settings) || settings.set) {\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                descr.set = wrapper;\n            }\n            Object.defineProperty(targetObj, field, descr);\n\n            return function unwrap(): void {\n                if ('value' in originalDescr) {\n                    descr = 0;\n                    originalDescr.value = (targetObj as AnyObject)[field];\n                }\n                Object.defineProperty(targetObj, field, originalDescr);\n            };\n        }\n    }\n\n    return wrapper;\n}\n\n/**\n * Wraps specified object's field(s)/method(s) or standalone function into new (wrapping) function\n * that calls passed handler which eventually may run wrapped function or get/set field's value.\n * \n * @param target\n *   Function that should be wrapped or an object whose field(s)/method(s) will be wrapped and replaced.\n * @param field\n *   Name of field/method (or list of field/method names) that should be wrapped or a handler\n *   when function is passed for `target` parameter.\n * @param handler\n *   A function (interceptor) that should be executed when newly created function is called\n *   or get/set operation for the field is applied, or settings when function is passed for `target` parameter.\n *   See {@link wrap} for details.\n * @param settings\n *   Optional settings that will be available in `handler`. See {@link wrap} for details.\n * @return {Function}\n *   Wrapping function when `target` is a function, or a function that restores original field(s)/method(s)\n *   when `target` is an object.\n * @author Denis Sikuler\n */\nexport function intercept(target: TargetObject, field: string | string[], handler: Handler, settings?: WrapSettings): Unwrap;\nexport function intercept(target: TargetFunction, handler: Handler, settings?: WrapSettings): Wrapper;\nexport function intercept(target: any, field: any, handler?: any, settings?: any): any {   // eslint-disable-line max-params, @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\n    if (Array.isArray(field)) {\n        const unwrapList: Unwrap[] = [];\n        for (let i = 0, len = field.length; i < len; i++) {\n            unwrapList.push( wrap(target, field[i], handler, settings) );\n        }\n\n        return unwrapList.length > 1\n            ? function unwrap(): void {\n                for (let i = 0, len = unwrapList.length; i < len; i++) {\n                    unwrapList[i]();\n                }\n            }\n            : unwrapList[0];\n    }\n\n    return wrap(target, field, handler, settings);\n}\n\nexport default intercept;\n"],"names":["wrap","target","field","handler","settings","fieldWrap","funcWrap","methodWrap","number","save","descr","fieldValue","get","method","original","targetObj","set","value","name","handlerContext","context","wrapper","arg","Array","prototype","slice","call","arguments","byCall","byGet","length","bySet","exec","argList","apply","env","arg0","byUnwrap","data","run","runApply","firstArg","isArray","result","before","listen","after","bind","unwrap","originalDescr","Object","getOwnPropertyDescriptor","writable","enumerable","configurable","val","defineProperty","intercept","unwrapList","i","len","push"],"mappings":"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"}