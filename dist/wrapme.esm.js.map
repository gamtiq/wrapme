{"version":3,"file":"wrapme.esm.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport type TargetFunction = (...args: any[]) => any;\n\nexport type AnyObject = {\n    [field in (number | string)]: any;\n};\n\nexport type TargetObject = AnyObject;\nexport type SaveObject = AnyObject;\n\nexport type Target = TargetObject | TargetFunction;\n\n/** Handler's parameter. */\nexport interface HandlerParam {\n    /** Array of arguments that were passed to the wrapping function or method. */\n    arg: any[];\n    /** Context (`this`) with which wrapping function is called. */\n    context: any;\n    /** Value of `settings.data` option. */\n    data: any;\n    /** Name of the method or function that was wrapped. */\n    method: string;\n    /** Number of `handler`'s call (starting from 1). */\n    number: number;\n    /** Result of original function/method when it is called before `handler`. */\n    result?: any;\n    /** \n     * Method that calls original function or method; by default values from `arg` will be used as arguments;\n     * but you may pass arguments to `run` and they will be used instead of the original arguments.\n     */\n    run: TargetFunction;\n    /**\n     * Similar to `run` but accepts an array of new arguments, e.g. `runApply([1, 2, 3])` is equivalent to `run(1, 2, 3)`;\n     * if the first argument of `runApply` is not an array it will be wrapped into array (i.e. `[arguments[0]]`);\n     * only the first argument  of `runApply` is used.\n     */\n    runApply: (paramSet?: any | any[]) => any;\n    /** An object that can be used to preserve some values between `handler` calls. */\n    save: SaveObject;\n    /**\n     * Value of `settings` parameter; except for `settings.bind` and `settings.context`,\n     * it is possible to change any setting to alter following execution;\n     * so be careful when you change a field's value of `settings` object.\n     */\n    settings: WrapSettings;\n    /** Original function or method that was wrapped. */\n    target: TargetFunction;\n    /** An object whose method was wrapped and replaced. */\n    targetObj: TargetObject | null;\n}\n\nexport type Handler = (param: HandlerParam) => any;\n\n/** Settings of {@link wrap} function. */\nexport interface WrapSettings {\n    /**\n     * Whether original function or method should be called after `handler`.\n     * When this option is set to `true`, the result of original function/method will be returned\n     * from wrapping function.\n     */\n    after?: boolean;\n    /**\n     * Whether original function or method should be called before `handler`.\n     * When this option is set to `true`, the result of original function/method will be available in `handler`\n     * and value returned from `handler` will be returned from wrapping function or method\n     * if `settings.after` is set to `false`.\n     */\n    before?: boolean;\n    /**\n     * Whether original function or method should be called before `handler`.\n     * When this option is set to `true`, the result of original function/method will be available in `handler`\n     * and will be returned from wrapping function or method if `settings.after` is set to `false`.\n     */\n    beforeResult?: boolean;\n    /** Whether wrapping function should be bound to `target` object. */\n    bind?: boolean;\n    /** Context (`this`) that should be used for `handler` call. */\n    context?: object;\n    /** Any data that should be available in `handler`. */\n    data?: any;\n    [field: string]: any;\n}\n\nexport type Wrapper = TargetFunction;\n\nexport type Unwrap = () => void;\n\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Wraps specified object's method or standalone function into new (wrapping) function\n * that calls passed handler which may run wrapped function eventually.\n * \n * @param target\n *   Function that should be wrapped or an object whose method will be wrapped and replaced.\n * @param method\n *   Name of method that should be wrapped or a handler when function is passed for `target` parameter.\n * @param handler\n *   A function (interceptor) that should be executed when newly created function is called, or settings when function is passed for `target` parameter.\n *   When `settings.after` and `settings.beforeResult` are `false`, result of `handler` will be returned from wrapping function.\n * @param settings\n *   Optional settings that will be available in `handler`.\n * @return\n *   Wrapping function when `target` is a function, or a function that restores original method when `target` is an object.\n * @author Denis Sikuler\n */\nexport function wrap(target: TargetObject, method: string, handler: Handler, settings?: WrapSettings): Unwrap;\nexport function wrap(target: TargetFunction, handler: Handler, settings?: WrapSettings): Wrapper;\nexport function wrap(target: any, method: any, handler?: any, settings?: any): any {   // eslint-disable-line max-params, @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\n    let number = 0;\n    const save = {};\n    let original: TargetFunction;\n    let targetObj: TargetObject | null;\n    if (typeof method === 'string') {\n        original = target[method];\n        targetObj = target;\n    }\n    /* eslint-disable no-param-reassign */\n    else {\n        original = target;\n        targetObj = null;\n        settings = handler;\n        handler = method;\n        method = target.name;\n    }\n    if (! settings) {\n        settings = {};\n    }\n    /* eslint-enable no-param-reassign */\n    const handlerContext = settings.context;\n\n    function wrapper(this: unknown): unknown {\n        // eslint-disable-next-line prefer-rest-params\n        const arg = Array.prototype.slice.call(arguments);\n        // eslint-disable-next-line consistent-this, no-invalid-this, @typescript-eslint/no-this-alias\n        const context = this;\n        const env: HandlerParam = {\n            arg,\n            context,\n            data: settings.data,\n            method,\n            number: ++number,\n            save,\n            settings,\n            target: original,\n            targetObj,\n            run,\n            runApply(firstArg) {\n                return original.apply(\n                    context,\n                    // eslint-disable-next-line no-nested-ternary\n                    arguments.length\n                        ? (Array.isArray(firstArg)\n                            ? firstArg\n                            : [firstArg]\n                        )\n                        : arg\n                );\n            }\n        };\n        let result;\n\n        function run(): unknown {\n            // eslint-disable-next-line multiline-ternary, prefer-rest-params\n            return original.apply(context, (arguments.length ? arguments : arg) as unknown[]);\n        }\n        \n        if (settings.before || settings.beforeResult) {\n            result = run();\n        }\n        env.result = result;\n        \n        env.result = handlerContext\n            ? handler.call(handlerContext, env)\n            : handler(env);\n\n        if (settings.after) {\n            result = run();\n        }\n        else if (! settings.beforeResult) {\n            result = env.result;\n        }\n        \n        return result;\n    }\n\n    if (targetObj) {\n        targetObj[method] = settings.bind\n            ? wrapper.bind(targetObj)\n            : wrapper;\n\n        return function unwrap(): void {\n            (targetObj as AnyObject)[method] = original;\n        };\n    }\n\n    return wrapper;\n}\n\n/**\n * Wraps specified object's method(s) or standalone function into new (wrapping) function\n * that calls passed handler which may run wrapped function eventually.\n * \n * @param target\n *   Function that should be wrapped or an object whose method(s) will be wrapped and replaced.\n * @param method\n *   Name of method (or list of method names) that should be wrapped or a handler when function is passed for `target` parameter.\n * @param handler\n *   A function (interceptor) that should be executed when newly created function is called,\n *   or settings when function is passed for `target` parameter. See {@link wrap} for details.\n * @param settings\n *   Optional settings that will be available in `handler`. See {@link wrap} for details.\n * @return {Function}\n *   Wrapping function when `target` is a function, or a function that restores original method(s) when `target` is an object.\n * @author Denis Sikuler\n */\nexport function intercept(target: TargetObject, method: string | string[], handler: Handler, settings?: WrapSettings): Unwrap;\nexport function intercept(target: TargetFunction, handler: Handler, settings?: WrapSettings): Wrapper;\nexport function intercept(target: any, method: any, handler?: any, settings?: any): any {   // eslint-disable-line max-params, @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\n    if (Array.isArray(method)) {\n        const unwrapList: Unwrap[] = [];\n        for (let i = 0, len = method.length; i < len; i++) {\n            unwrapList.push( wrap(target, method[i], handler, settings) );\n        }\n\n        return unwrapList.length > 1\n            ? function unwrap(): void {\n                for (let i = 0, len = unwrapList.length; i < len; i++) {\n                    unwrapList[i]();\n                }\n            }\n            : unwrapList[0];\n    }\n\n    return wrap(target, method, handler, settings);\n}\n\nexport default intercept;\n"],"names":["wrap","target","method","handler","settings","number","save","original","targetObj","name","handlerContext","context","wrapper","arg","Array","prototype","slice","call","arguments","env","data","run","runApply","firstArg","apply","length","isArray","result","before","beforeResult","after","bind","unwrap","intercept","unwrapList","i","len","push"],"mappings":"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"}