{"version":3,"file":"wrapme.umd.production.min.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport type AnyFunction = (...args: any[]) => any;\nexport type TargetFunction = AnyFunction;\n\nexport type AnyObject = {\n    [field in (number | string)]: any;\n};\n\nexport type TargetObject = AnyObject;\nexport type SaveObject = AnyObject;\n\nexport type Target = TargetObject | TargetFunction;\n\nexport type FieldGetter = () => unknown;\nexport type FieldSetter = (value: unknown) => unknown;\n\n/** Handler's parameter. */\nexport interface HandlerParam {\n    /** Array of arguments that were passed to the wrapping function. */\n    arg: any[];\n    /** Value of `arg[0]`. */\n    arg0: any;\n    /** Whether wrapping function is called as object's method or as usual function (by a call operation). */\n    byCall: boolean;\n    /** Whether wrapping function is called to get field's value (by get operation, as field's getter). */\n    byGet: boolean;\n    /** Whether wrapping function is called to set field's value (by set operation, as field's setter). */\n    bySet: boolean;\n    /** Whether wrapping function (and `handler`) is called during unwrapping. */\n    byUnwrap: boolean;\n    /** Context (`this`) with which wrapping function is called. */\n    context: any;\n    /** Value of `settings.data` option. */\n    data: any;\n    /** Name of the field or method that was wrapped. */\n    field: string | undefined;\n    /** Whether field's get and/or set operation was wrapped. */\n    fieldWrap: boolean;\n    /** Whether standalone function (not object's field/method) was wrapped. */\n    funcWrap: boolean;\n    /** Function that returns field's current value if field was wrapped. */\n    get: FieldGetter | undefined;\n    /** Name of the method or function that was wrapped. */\n    method: string | undefined;\n    /** Whether method was wrapped. */\n    methodWrap: boolean;\n    /** Number of `handler`'s call (starting from 1). */\n    number: number;\n    /** Result of original function/method when it is called before `handler`. */\n    result?: any;\n    /** \n     * Method that calls original function/method or field's getter/setter;\n     * by default values from `arg` will be used as arguments;\n     * but you may pass arguments to `run` and they will be used instead of the original arguments.\n     */\n    run: AnyFunction;\n    /**\n     * Similar to `run` but accepts an array of new arguments, e.g. `runApply([1, 2, 3])` is equivalent to `run(1, 2, 3)`;\n     * if the first argument of `runApply` is not an array it will be wrapped into array (i.e. `[arguments[0]]`);\n     * only the first argument  of `runApply` is used.\n     */\n    runApply: (paramSet?: any | any[]) => any;\n    /** An object that can be used to preserve some values between `handler` calls. */\n    save: SaveObject;\n    /** Function that changes field's current value if field was wrapped. */\n    set: FieldSetter | undefined;\n    /**\n     * Value of `settings` parameter; except for `settings.bind` and `settings.context`,\n     * it is possible to change any setting to alter following execution;\n     * so be careful when you change a field's value of `settings` object.\n     */\n    settings: WrapSettings;\n    /** Original function or method that was wrapped, or name of wrapped field. */\n    target: TargetFunction | string;\n    /** An object whose field/method was wrapped and replaced. */\n    targetObj: TargetObject | null;\n    /** Previous value returned by wrapping function. */\n    value: unknown;\n}\n\nexport type Handler = (param: HandlerParam) => any;\n\n/** Settings of {@link wrap} function. */\nexport interface WrapSettings {\n    /**\n     * Whether original function, method or field's operation should be called after `handler`.\n     * When this option is set to `true`, the result of original function/method or field's operation\n     * will be returned from wrapping function.\n     */\n    after?: boolean;\n    /**\n     * Whether original function, method or field's operation should be called before `handler`.\n     * When this option is set to `true`, the result of original function/method or field's operation\n     * will be available in `handler` and value returned from `handler` will be returned from wrapping function\n     * if `settings.after` and `settings.listen` are set to `false`.\n     */\n    before?: boolean;\n    /** Whether wrapping function should be bound to `target` object. */\n    bind?: boolean;\n    /** Context (`this`) that should be used for `handler` call. */\n    context?: object;\n    /** Any data that should be available in `handler`. */\n    data?: any;\n    /**\n     * Whether field's get operation should be intercepted and\n     * whether created wrapping function should be used as field's getter.\n     * If a function is provided the function will be used as value for `HandlerParam.get`\n     * when no getter is specified for the field.\n     * Default value is `true` for usual (non-functional) field and `false` for method.\n     */\n    get?: boolean | FieldGetter;\n    /**\n     * Whether original function, method or field's operation should be called before `handler`.\n     * When this option is set to `true`, the result of original function/method or field's operation\n     * will be available in `handler` and will be returned from wrapping function\n     * if `settings.after` is set to `false`.\n     */\n    listen?: boolean;\n    /**\n     * Whether field's set operation should be intercepted and\n     * whether created wrapping function should be used as field's setter.\n     * If a function is provided the function will be used as value for `HandlerParam.set`\n     * when no getter is specified for the field.\n     * Default value is `true` for usual (non-functional) field and `false` for method.\n     */\n    set?: boolean | FieldSetter;\n    [field: string]: any;\n}\n\nexport type Wrapper = TargetFunction;\n\nexport type Unwrap = () => void;\n\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Wraps specified object's field/method or standalone function into new (wrapping) function\n * that calls passed handler which eventually may run wrapped function or get/set field's value.\n * \n * @param target\n *   Function that should be wrapped or an object whose field/method will be wrapped and replaced.\n * @param field\n *   Name of field/method that should be wrapped or a handler when function is passed for `target` parameter.\n * @param handler\n *   A function (interceptor) that should be executed when newly created function is called\n *   or get/set operation for the field is applied, or settings when function is passed for `target` parameter.\n *   When `settings.after` and `settings.listen` are `false`, result of `handler` will be returned from wrapping function.\n * @param settings\n *   Optional settings that will be available in `handler`.\n * @return\n *   Wrapping function when `target` is a function, or a function that restores original field/method when `target` is an object.\n * @author Denis Sikuler\n */\nexport function wrap(target: TargetObject, field: string, handler: Handler, settings?: WrapSettings): Unwrap;\nexport function wrap(target: TargetFunction, handler: Handler, settings?: WrapSettings): Wrapper;\nexport function wrap(target: any, field: any, handler?: any, settings?: any): any {   // eslint-disable-line max-params, @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\n    let fieldWrap = false;\n    let funcWrap = false;\n    let methodWrap = false;\n    let number = 0;\n    const save = {};\n    let descr: number | PropertyDescriptor | undefined = 1;\n    let fieldValue: unknown;\n    let get: FieldGetter | undefined;\n    let method: string | undefined;\n    let original: AnyFunction | string;\n    let targetObj: TargetObject | null;\n    let set: FieldSetter | undefined;\n    let value: unknown;\n    if (typeof field === 'string') {\n        targetObj = target;\n        original = target[field];\n        if (typeof original === 'function' && (! settings || (! settings.get && ! settings.set))) {\n            method = field;\n            methodWrap = true;\n        }\n        else {\n            fieldValue = original;\n            original = field;\n            fieldWrap = true;\n        }\n    }\n    /* eslint-disable no-param-reassign */\n    else {\n        original = target;\n        targetObj = null;\n        settings = handler;\n        handler = field;\n        field = method;\n        method = target.name;\n        funcWrap = true;\n    }\n    if (! settings) {\n        settings = {};\n    }\n    /* eslint-enable no-param-reassign */\n    const handlerContext = settings.context;\n\n    function wrapper(this: unknown): unknown {\n        // eslint-disable-next-line prefer-rest-params\n        const arg = Array.prototype.slice.call(arguments);\n        const byCall = ! fieldWrap;\n        const byGet = fieldWrap && ! arg.length;\n        const bySet = fieldWrap && ! byGet;\n        // eslint-disable-next-line consistent-this, no-invalid-this, @typescript-eslint/no-this-alias\n        const context = this;\n\n        function exec(argList: unknown[]): unknown {\n            if (byGet) {\n                return (get as TargetFunction)();\n            }\n            if (bySet) {\n                return (set as TargetFunction)(argList[0]);\n            }\n            \n            return (original as AnyFunction).apply(context, argList);\n        }\n\n        const env: HandlerParam = {\n            arg,\n            arg0: arg[0],\n            byCall,\n            byGet,\n            bySet,\n            byUnwrap: ! descr,\n            context,\n            data: settings.data,\n            field,\n            fieldWrap,\n            funcWrap,\n            get,\n            method,\n            methodWrap,\n            number: ++number,\n            save,\n            set,\n            settings,\n            target: original,\n            targetObj,\n            run,\n            runApply(firstArg) {\n                return exec(\n                    // eslint-disable-next-line no-nested-ternary\n                    arguments.length\n                        ? (Array.isArray(firstArg)\n                            ? firstArg\n                            : [firstArg]\n                        )\n                        : arg\n                );\n            },\n            value\n        };\n        let result;\n\n        function run(): unknown {\n            // eslint-disable-next-line multiline-ternary, prefer-rest-params\n            return exec((arguments.length ? arguments : arg) as unknown[]);\n        }\n        \n        if (settings.before || settings.listen) {\n            result = run();\n        }\n        env.result = result;\n        \n        env.result = handlerContext\n            ? handler.call(handlerContext, env)\n            : handler(env);\n\n        if (settings.after) {\n            result = run();\n        }\n        else if (! settings.listen) {\n            result = env.result;\n        }\n        \n        // eslint-disable-next-line no-return-assign\n        return value = result;\n    }\n\n    if (targetObj) {\n        if (methodWrap) {\n            targetObj[method as string] = settings.bind\n                ? wrapper.bind(targetObj)\n                : wrapper;\n\n            return function unwrap(): void {\n                (targetObj as AnyObject)[method as string] = original;\n            };\n        }\n        else {\n            const originalDescr = Object.getOwnPropertyDescriptor(targetObj, field)\n                || {value: fieldValue, writable: true, enumerable: true, configurable: true};\n            descr = Object.getOwnPropertyDescriptor(targetObj, field);\n            if (descr) {\n                delete descr.value;\n                delete descr.writable;\n            }\n            else {\n                descr = {enumerable: true, configurable: true};\n            }\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            get = descr.get\n                || (typeof settings.get === 'function' ? settings.get : null)   // eslint-disable-line multiline-ternary\n                || function get(): unknown {   // eslint-disable-line no-shadow\n                    return fieldValue;\n                };\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            set = descr.set\n                || (typeof settings.set === 'function' ? settings.set : null)   // eslint-disable-line multiline-ternary\n                || function set(val: unknown): unknown {   // eslint-disable-line no-shadow\n                    // eslint-disable-next-line no-return-assign\n                    return fieldValue = val;\n                };\n            if (! ('get' in settings) || settings.get) {\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                descr.get = wrapper;\n            }\n            if (! ('set' in settings) || settings.set) {\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                descr.set = wrapper;\n            }\n            Object.defineProperty(targetObj, field, descr);\n\n            return function unwrap(): void {\n                if ('value' in originalDescr) {\n                    descr = 0;\n                    originalDescr.value = (targetObj as AnyObject)[field];\n                }\n                Object.defineProperty(targetObj, field, originalDescr);\n            };\n        }\n    }\n\n    return wrapper;\n}\n\n/**\n * Wraps specified object's field(s)/method(s) or standalone function into new (wrapping) function\n * that calls passed handler which eventually may run wrapped function or get/set field's value.\n * \n * @param target\n *   Function that should be wrapped or an object whose field(s)/method(s) will be wrapped and replaced.\n * @param field\n *   Name of field/method (or list of field/method names) that should be wrapped or a handler\n *   when function is passed for `target` parameter.\n * @param handler\n *   A function (interceptor) that should be executed when newly created function is called\n *   or get/set operation for the field is applied, or settings when function is passed for `target` parameter.\n *   See {@link wrap} for details.\n * @param settings\n *   Optional settings that will be available in `handler`. See {@link wrap} for details.\n * @return {Function}\n *   Wrapping function when `target` is a function, or a function that restores original field(s)/method(s)\n *   when `target` is an object.\n * @author Denis Sikuler\n */\nexport function intercept(target: TargetObject, field: string | string[], handler: Handler, settings?: WrapSettings): Unwrap;\nexport function intercept(target: TargetFunction, handler: Handler, settings?: WrapSettings): Wrapper;\nexport function intercept(target: any, field: any, handler?: any, settings?: any): any {   // eslint-disable-line max-params, @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\n    if (Array.isArray(field)) {\n        const unwrapList: Unwrap[] = [];\n        for (let i = 0, len = field.length; i < len; i++) {\n            unwrapList.push( wrap(target, field[i], handler, settings) );\n        }\n\n        return unwrapList.length > 1\n            ? function unwrap(): void {\n                for (let i = 0, len = unwrapList.length; i < len; i++) {\n                    unwrapList[i]();\n                }\n            }\n            : unwrapList[0];\n    }\n\n    return wrap(target, field, handler, settings);\n}\n\nexport default intercept;\n"],"names":["wrap","target","field","handler","settings","fieldValue","get","method","original","targetObj","set","value","fieldWrap","funcWrap","methodWrap","number","save","descr","name","handlerContext","context","wrapper","arg","Array","prototype","slice","call","arguments","byCall","byGet","length","bySet","this","exec","argList","apply","result","env","arg0","byUnwrap","data","run","runApply","firstArg","isArray","before","listen","after","bind","originalDescr","Object","getOwnPropertyDescriptor","writable","enumerable","configurable","val","defineProperty","intercept","unwrapList","i","len","push"],"mappings":"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"}